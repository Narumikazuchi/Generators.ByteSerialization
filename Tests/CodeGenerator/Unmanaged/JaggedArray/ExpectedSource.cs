namespace Tests.CodeGenerator.Unmanaged.JaggedArray;

static public class ExpectedSource
{
    public const String HANDLER_FILENAME = @"Narumikazuchi.Generators.ByteSerialization.Core\Narumikazuchi.Generators.ByteSerialization.Generators.SerializableGenerator\Narumikazuchi.Generated.Internals.ByteSerialization.Handler.Array[Array[{0}+1]+1].g.cs";

    public const String HANDLER_SOURCE = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable
#nullable disable

using System;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;

namespace Narumikazuchi.Generated.Internals.ByteSerialization;

public partial interface IAssemblyHandler_TestProject : Narumikazuchi.Generators.ByteSerialization.ISerializationHandler<{0}[][]>
{
    [CompilerGenerated]
    UInt32 Narumikazuchi.Generators.ByteSerialization.ISerializationHandler<{0}[][]>.Deserialize(ReadOnlySpan<Byte> buffer, out {0}[][] result)
    {
        var pointer = sizeof(Int32);
        result = default({0}[][]);
        if (buffer[pointer++] == 0x1)
        {
            var _var0 = Unsafe.As<Byte, Narumikazuchi.Generators.ByteSerialization.TypeIdentifier>(ref MemoryMarshal.GetReference(buffer[pointer..]));
            pointer += Unsafe.SizeOf<Narumikazuchi.Generators.ByteSerialization.TypeIdentifier>();
            var _var1 = Unsafe.As<Byte, Int32>(ref MemoryMarshal.GetReference(buffer[pointer..]));
            pointer += sizeof(Int32);
            result = new {0}[_var1][];
            for (var _var2 = 0; _var2 < _var1; _var2++)
            {
                var _var3 = default({0}[]);
                if (buffer[pointer++] == 0x1)
                {
                    var _var4 = Unsafe.As<Byte, Narumikazuchi.Generators.ByteSerialization.TypeIdentifier>(ref MemoryMarshal.GetReference(buffer[pointer..]));
                    pointer += Unsafe.SizeOf<Narumikazuchi.Generators.ByteSerialization.TypeIdentifier>();
                    var _var5 = Unsafe.As<Byte, Int32>(ref MemoryMarshal.GetReference(buffer[pointer..]));
                    pointer += Unsafe.SizeOf<Int32>();
                    _var3 = MemoryMarshal.Cast<Byte, {0}>(buffer[pointer..(pointer + _var5)]).ToArray();
                    pointer += _var5;
                }
                else
                {
                    pointer += Unsafe.SizeOf<Narumikazuchi.Generators.ByteSerialization.TypeIdentifier>();
                }
                result[_var2] = _var3;
            }
        }
        else
        {
            Unsafe.SizeOf<Narumikazuchi.Generators.ByteSerialization.TypeIdentifier>();
        }
        return (UInt32)pointer;
    }

    [CompilerGenerated]
    Int32 Narumikazuchi.Generators.ByteSerialization.ISerializationHandler<{0}[][]>.GetExpectedArraySize({0}[][] value)
    {
        var size = sizeof(Int64) + Unsafe.SizeOf<Narumikazuchi.Generators.ByteSerialization.TypeIdentifier>();
        if (value is not null)
        {
            size += sizeof(Int32) * 1;
            foreach (var _var0 in value)
            {
                if (_var0 is not null)
                {
                    size += sizeof(Int32) + _var0.Length * Unsafe.SizeOf<{0}>();
                }
            }
        }
        return size;
    }

    [CompilerGenerated]
    UInt32 Narumikazuchi.Generators.ByteSerialization.ISerializationHandler<{0}[][]>.Serialize(Span<Byte> buffer, {0}[][] value)
    {
        var pointer = sizeof(Int32);
        if (value is null)
        {
            buffer[pointer++] = 0x0;
            Unsafe.As<Byte, Narumikazuchi.Generators.ByteSerialization.TypeIdentifier>(ref buffer[pointer]) = Narumikazuchi.Generators.ByteSerialization.TypeIdentifier.CreateFrom(typeof({0}[][]));
            pointer += Unsafe.SizeOf<Narumikazuchi.Generators.ByteSerialization.TypeIdentifier>();
        }
        else
        {
            buffer[pointer++] = 0x1;
            Unsafe.As<Byte, Narumikazuchi.Generators.ByteSerialization.TypeIdentifier>(ref buffer[pointer]) = Narumikazuchi.Generators.ByteSerialization.TypeIdentifier.CreateFrom(typeof({0}[][]));
            pointer += Unsafe.SizeOf<Narumikazuchi.Generators.ByteSerialization.TypeIdentifier>();
            Unsafe.As<Byte, Int32>(ref buffer[pointer]) = value.GetLength(0);
            pointer += sizeof(Int32);
            foreach (var _var0 in value)
            {
                if (_var0 is null)
                {
                    buffer[pointer++] = 0x0;
                    Unsafe.As<Byte, Narumikazuchi.Generators.ByteSerialization.TypeIdentifier>(ref buffer[pointer]) = Narumikazuchi.Generators.ByteSerialization.TypeIdentifier.CreateFrom(typeof({0}[]));
                    pointer += Unsafe.SizeOf<Narumikazuchi.Generators.ByteSerialization.TypeIdentifier>();
                }
                else
                {
                    buffer[pointer++] = 0x1;
                    Unsafe.As<Byte, Narumikazuchi.Generators.ByteSerialization.TypeIdentifier>(ref buffer[pointer]) = Narumikazuchi.Generators.ByteSerialization.TypeIdentifier.CreateFrom(typeof({0}[]));
                    pointer += Unsafe.SizeOf<Narumikazuchi.Generators.ByteSerialization.TypeIdentifier>();
                    var _var1 = MemoryMarshal.AsBytes<{0}>(_var0);
                    Unsafe.As<Byte, Int32>(ref buffer[pointer]) = _var1.Length;
                    pointer += sizeof(Int32);
                    _var1.CopyTo(buffer[pointer..]);
                    pointer += _var1.Length;
                }
            }
        }
        Unsafe.As<Byte, Int32>(ref buffer[0]) = pointer;
        return (UInt32)pointer;
    }
}";
}