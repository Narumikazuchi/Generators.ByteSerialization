namespace Narumikazuchi.Generators.ByteSerialization.Generators;

public partial class SerializableGenerator
{
    static private void GenerateHandlerSource(IAssemblySymbol assembly,
                                              INamedTypeSymbol symbol,
                                              ImmutableArray<IFieldSymbol> fields,
                                              SourceProductionContext context)
    {
        StringBuilder builder = new();
        builder.AppendLine($"public partial interface __Internal_IAssemblyHandler_{assembly.Name.Replace(".", "")} : Narumikazuchi.Generators.ByteSerialization.ISerializationHandler<{symbol.ToFrameworkString()}>");
        builder.AppendLine("{");
        String indent = "    ";

        DeserializationHelper.GenerateDeserializeMethod(symbol: symbol,
                                                        fields: fields,
                                                        builder: builder,
                                                        indent: indent);
        builder.AppendLine();

        SizeHelper.GenerateGetExpectedByteSizeMethod(symbol: symbol,
                                                     fields: fields,
                                                     builder: builder,
                                                     indent: indent);
        builder.AppendLine();

        SerializationHelper.GenerateSerializeMethod(symbol: symbol,
                                                    fields: fields,
                                                    builder: builder,
                                                    indent: indent);
        builder.AppendLine();

        builder.AppendLine("}");

        String meta = $@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable
#nullable enable

using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Narumikazuchi.Generated;

";
        String source = meta + builder.ToString();

#if OUTPUT
        System.IO.File.WriteAllText($@"D:\Sources\Narumikazuchi.Generated.Handler.{symbol.ToFileString()}.g.cs", source);
#else
        try
        {
            SourceText text = SourceText.From(text: source,
                                              encoding: Encoding.UTF8);
            context.AddSource(hintName: $"Narumikazuchi.Generated.Handler.{symbol.ToFileString()}.g.cs",
                              sourceText: text);
        }
        catch { }
#endif
    }
    static private void GenerateHandlerSource(IAssemblySymbol assembly,
                                              IArrayTypeSymbol symbol,
                                              ITypeSymbol elementType,
                                              SourceProductionContext context)
    {
        StringBuilder builder = new();
        builder.AppendLine($"public partial interface __Internal_IAssemblyHandler_{assembly.Name.Replace(".", "")} : Narumikazuchi.Generators.ByteSerialization.ISerializationHandler<{symbol.ToFrameworkString()}>");
        builder.AppendLine("{");
        String indent = "    ";

        DeserializationHelper.GenerateDeserializeMethod(symbol: symbol,
                                                        builder: builder,
                                                        indent: indent);
        builder.AppendLine();

        SizeHelper.GenerateGetExpectedByteSizeMethod(symbol: symbol,
                                                     builder: builder,
                                                     indent: indent);
        builder.AppendLine();

        SerializationHelper.GenerateSerializeMethod(symbol: symbol,
                                                    builder: builder,
                                                    indent: indent);
        builder.AppendLine();

        builder.AppendLine("}");

        String meta = $@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable
#nullable enable

using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace Narumikazuchi.Generated;

";
        String source = meta + builder.ToString();

#if OUTPUT
        System.IO.File.WriteAllText($@"D:\Sources\Narumikazuchi.Generated.Handler.{symbol.ToFileString()}.g.cs", source);
#else
        try
        {
            SourceText text = SourceText.From(text: source,
                                              encoding: Encoding.UTF8);
            context.AddSource(hintName: $"Narumikazuchi.Generated.Handler.{symbol.ToFileString()}.g.cs",
                              sourceText: text);
        }
        catch { }
#endif
    }
}