namespace Narumikazuchi.Generators.ByteSerialization.Generators;

public partial class SerializableGenerator
{
    static private void GenerateConstructorMediatorSource(INamedTypeSymbol symbol,
                                                          ImmutableArray<IFieldSymbol> fields,
                                                          SourceProductionContext context)
    {
        StringBuilder builder = new();
        builder.Append($"public delegate {symbol.ToFrameworkString()} __Internal_ConstructorFor_{symbol.ToNameString()}(");

        GenerateConstructorMediatorParameters(fields: fields,
                                              builder: builder);

        builder.Append(");");

        String meta = $@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable
#nullable enable

using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace Narumikazuchi.Generated;

[EditorBrowsable(EditorBrowsableState.Never)]
[CompilerGenerated]
";
        String source = meta + builder.ToString();

#if OUTPUT
        System.IO.File.WriteAllText($@"D:\Sources\Narumikazuchi.Generated.Constructor.{symbol.ToFileString()}.g.cs", source);
#else
        try
        {
            SourceText text = SourceText.From(text: source,
                                              encoding: Encoding.UTF8);
            context.AddSource(hintName: $"Narumikazuchi.Generated.Constructor.{symbol.ToFileString()}.g.cs",
                              sourceText: text);
        }
        catch { }
#endif
    }

    static private void GenerateConstructorMediatorParameters(ImmutableArray<IFieldSymbol> fields,
                                                              StringBuilder builder)
    {
        Boolean first = true;
        foreach (IFieldSymbol field in fields)
        {
            if (first)
            {
                first = false;
            }
            else
            {
                builder.Append(", ");
            }

            ISymbol target = field;
            if (field.AssociatedSymbol is not null)
            {
                target = field.AssociatedSymbol;
            }

            builder.Append($"{field.Type.ToFrameworkString()} {target.Name}");
        }
    }

    static private void GenerateConstructorSource(INamedTypeSymbol symbol,
                                                  ImmutableArray<IFieldSymbol> fields,
                                                  SourceProductionContext context)
    {
        StringBuilder builder = new();
        String indent = "    ";
        builder.AppendLine($"{indent}static public __Internal_ConstructorFor_{symbol.ToNameString()} ConstructorFor_{symbol.ToNameString()}");
        builder.AppendLine($"{indent}{{");
        indent += "    ";
        builder.AppendLine($"{indent}get");
        builder.AppendLine($"{indent}{{");
        indent += "    ";
        builder.AppendLine($"{indent}return s_ConstructorFor_{symbol.ToNameString()}.Value;");

        indent = indent.Substring(4);
        builder.AppendLine($"{indent}}}");
        indent = indent.Substring(4);
        builder.AppendLine($"{indent}}}");
        builder.AppendLine();

        builder.AppendLine($"{indent}[EditorBrowsable(EditorBrowsableState.Never)]");
        builder.AppendLine($"{indent}[CompilerGenerated]");
        builder.AppendLine($"{indent}static private __Internal_ConstructorFor_{symbol.ToNameString()} GenerateConstructorFor_{symbol.ToNameString()}()");
        builder.AppendLine($"{indent}{{");
        indent += "    ";

        GenerateConstructorBody(symbol: symbol,
                                fields: fields,
                                builder: builder,
                                indent: indent);

        indent = indent.Substring(4);
        builder.AppendLine($"{indent}}}");

        builder.AppendLine();
        builder.AppendLine($"{indent}static private Lazy<__Internal_ConstructorFor_{symbol.ToNameString()}> s_ConstructorFor_{symbol.ToNameString()} = new Lazy<__Internal_ConstructorFor_{symbol.ToNameString()}>(GenerateConstructorFor_{symbol.ToNameString()}, LazyThreadSafetyMode.ExecutionAndPublication);");
        builder.Append('}');

        String meta = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable
#nullable enable

using System;
using System.ComponentModel;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.CompilerServices;
using System.Threading;

namespace Narumikazuchi.Generated;

static public partial class __Internal_ConstructorGenerator
{
    [EditorBrowsable(EditorBrowsableState.Never)]
    [CompilerGenerated]
";
        String source = meta + builder.ToString();

#if OUTPUT
        System.IO.File.WriteAllText($@"D:\Sources\Narumikazuchi.Generated.ConstructorGenerator.{symbol.ToFileString()}.g.cs", source);
#else
        try
        {
            SourceText text = SourceText.From(text: source,
                                              encoding: Encoding.UTF8);
            context.AddSource(hintName: $"Narumikazuchi.Generated.ConstructorGenerator.{symbol.ToFileString()}.g.cs",
                              sourceText: text);
        }
        catch { }
#endif
    }

    static private void GenerateConstructorBody(INamedTypeSymbol symbol,
                                                ImmutableArray<IFieldSymbol> fields,
                                                StringBuilder builder,
                                                String indent)
    {
        builder.Append($"{indent}Type[] parameters = new Type[] {{ ");
        Boolean first = true;
        foreach (IFieldSymbol field in fields)
        {
            if (first)
            {
                first = false;
            }
            else
            {
                builder.Append(", ");
            }

            builder.Append($"typeof({field.Type.ToFrameworkString()})");
        }
        builder.AppendLine(" };");

        builder.AppendLine($"{indent}DynamicMethod method = new(\"<Generated>_Constructor\", typeof({symbol.ToFrameworkString()}), parameters, typeof({symbol.ToFrameworkString()}));");
        builder.AppendLine($"{indent}ILGenerator generator = method.GetILGenerator();");
        builder.AppendLine($"{indent}generator.DeclareLocal(typeof({symbol.ToFrameworkString()}));");
        if (symbol.IsValueType)
        {
            builder.AppendLine($"{indent}generator.Emit(OpCodes.Ldloca_S, 0);");
            builder.AppendLine($"{indent}generator.Emit(OpCodes.Initobj, typeof({symbol.ToFrameworkString()}));");
            Int32 argumentIndex = 0;
            foreach (IFieldSymbol field in fields)
            {
                builder.AppendLine($"{indent}generator.Emit(OpCodes.Ldloca_S, 0);");
                builder.AppendLine($"{indent}generator.Emit(OpCodes.Ldarg, {argumentIndex++});");
                builder.AppendLine($"{indent}generator.Emit(OpCodes.Stfld, typeof({field.ContainingType.ToFrameworkString()}).GetField(\"{field.Name}\", BindingFlags.NonPublic | BindingFlags.Instance)!);");
            }
        }
        else
        {
            builder.AppendLine($"{indent}generator.Emit(OpCodes.Ldtoken, typeof({symbol.ToFrameworkString()}));");
            builder.AppendLine($"{indent}generator.Emit(OpCodes.Call, typeof(Type).GetMethod(nameof(Type.GetTypeFromHandle))!);");
            builder.AppendLine($"{indent}generator.Emit(OpCodes.Call, typeof(RuntimeHelpers).GetMethod(nameof(RuntimeHelpers.GetUninitializedObject))!);");
            builder.AppendLine($"{indent}generator.Emit(OpCodes.Castclass, typeof({symbol.ToFrameworkString()}));");
            builder.AppendLine($"{indent}generator.Emit(OpCodes.Stloc_0);");
            Int32 argumentIndex = 0;
            foreach (IFieldSymbol field in fields)
            {
                builder.AppendLine($"{indent}generator.Emit(OpCodes.Ldloc_0);");
                builder.AppendLine($"{indent}generator.Emit(OpCodes.Ldarg, {argumentIndex++});");
                builder.AppendLine($"{indent}generator.Emit(OpCodes.Stfld, typeof({field.ContainingType.ToFrameworkString()}).GetField(\"{field.Name}\", BindingFlags.NonPublic | BindingFlags.Instance)!);");
            }
        }

        builder.AppendLine($"{indent}generator.Emit(OpCodes.Ldloc_0);");
        builder.AppendLine($"{indent}generator.Emit(OpCodes.Ret);");
        builder.AppendLine($"{indent}return method.CreateDelegate<__Internal_ConstructorFor_{symbol.ToNameString()}>();");
    }
}